# -*- coding: utf-8 -*-
"""StandardScaler , MinMaxScaler , Normalizasyonipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12lhiYWZeGA2muee9zKnepSd8s3fyW9hp
"""

import pandas as pd ; import numpy as np
from sklearn.preprocessing import StandardScaler,MinMaxScaler

df=pd.read_csv('plane.csv')
df.head(3)

df.info()

df.shape

df=df[["Rcmnd cruise Knots","Stall Knots dirty","Fuel gal/lbs","Eng out rate of climb","Eng out rate of climb","Price"]]

df.head(3)
df=df.dropna()

y=df['Price']
x=df.drop('Price',axis=1)

#Y için normalizasyon yapılmaz
#bağımsız değişkenlerin çok aralıklı olması outlier etkisini azaltır
#model performansı artar

SS=StandardScaler()
x2=SS.fit_transform(x)
x2

x2=pd.DataFrame(x2)
x2

x2[0].mean()

mm=MinMaxScaler()
x3=mm.fit_transform(x)

x3=pd.DataFrame(x3)
x3.head(4)

#Yani asıl mantık şu
#Mesela bir araba satın alıyoruz parametrelerimiz arabanın yaşı ve km'si olsun
#Bu 2 parametre birbirinden o kadar uzak değerler ki
#Arabanın ilk üretim yılı 1994 son modeli ise 2024 olsun yani max 30 yaşında min 0 yaşında olabilir
#1994 modeline 0 2024 modeline 1 değerini veriyor mesela 2000 model almışsam ben 0,2... gibi bir sayı çıakrıyor
#Ya da km 0 ile 250.000 km arası olsun
# 0 km'ye 0 250.000 km'ye 1 değerini veriyor alacak olduğum araba 200.000 km'de ise 0.8.. gibi bir değer veriyor bu şekilde parametreler arası boyut farkını küçültüyor

#Derin öğrenmede daha çok işe yarıyor.