# -*- coding: utf-8 -*-
"""Pandas1ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dx51xcsFeHVXJfO_eih1SNkGAEbhvTo2

1 PANDAS NEDİR
HIZLI GÜÇLÜ ESNEK VE KULLANIMI KOLAY OLAN VERİ ANALİZİ İÇİN KULLANILAN PYTHON PAKETİDİR.
PANDAS=PANEL DATA HERHANGİ Bİ DURUMDA ZAMANA BAĞLI OLARAK ELDE EDİLEN VERİLERDİR.
#MAKİNE ÖĞRENMESİNİN BAŞARISINI SAĞLAMAK İÇİN ONA MÜMKÜN OLDUĞUNCA ÇOK MİKTARDA VERİ VERMEK GEREKİR.
#pandas numpy kütüphanesi üzerine kurulmuştur.
#numpyde indexleme 0,1,2,3 olarak ilerkemektedir ama pandasta biz kendimiz dilediğimiz şekilde verebiliriz.

#GÖREV ANALİZİ VE MANİPÜLASYONU YAPMA ARACI
"""

import pandas as pd

print(pd.__version__)

#pandas nasıl çalışır ??
#pandas verileri alır sutun ve satırlardan oluşan listelere çevirir
#tek boyutlu olduğu zaman yani tek sutun olduğu zaman pandas serisidir
#birden daha fazla boyutlu olduğu zaman yani sutundan oluştuğu zaman pandasdataframedir

#pyton liste oluşturuyoruz
student=['Halil',23,'SE']
print(student)
print(type(student))
print()

#burada student listesinden oluşturacağımız pandas dizini
ps_student=pd.Series(student)
print(ps_student)
print(type(ps_student))

#bu kezde pythonun klasik dış veri yapısından bi pandas serisi nesnesi ps oluşturalım
student={
    'name':'Halil',
    'age':23,
    'department':'CE'
}
#burada dictionary oluşturduk
print(student)
print(type(student))
print()

#pandaseries nesnesi oluşturdum
ps_student=pd.Series(student)
print(ps_student)
print(type(ps_student))

#liste yapısında index numarasını kendi vermişti dictionary olduğu zaman key yapılarını index olarak alıyor valuelerde sutun değeri olarak yazılıyor.

from re import X
"""student=pd.Series(['Halil',23,'SE'])
print(student)
print(type(student))
#burda direkt kendimiz ps oluşturduk
print()

numbers=pd.Series([24,37,43])
print(numbers)
print(type(numbers))

print()

booleans=pd.Series([True,False,True])
print(booleans)
print(type(booleans))
"""
#burda dic attığımız için önce key value belirtmemiz lazım
student=pd.Series(data=['Halil',23,'SE'],index=['name','age','department'])
print(student)
print(student.values)
print()
print(student.index)
print()
print(student.shape)
#şekil 3 elemandan oluşan bir tupple döndürüyor
print()
print(student.ndim)
#sutun sayısı tek sutun veriyor
print()
print(student.size)
print()
print(student.name)
print()
print(student.dtype)


#mesela içeriğini bilmediğimiz herhangi bi sql dosyası veritabanı aldğımızda içinde bir şeyin olup olmadığını nasıl inceleriz ??
X='name' in student
print(X)
Y='job' in student
print(Y)

Z='Ahmet' in student.values
print(Z)

numbers=pd.Series([4,2.5,2,7.7,12])
print(numbers)
print(numbers.sum())
#içindekileri topla
print(numbers.mean())
#ortalaması
print(numbers.product())
#çarpımları

student=pd.Series(data=['Halil','Software',23,'SE'],index=['name','surname','age','departmant'])
#ilki data sonrakini index olarak alıyor bizim extra belirtmemize gerek yok
print(student)
print()
print(student['name'])
#eğer birden fazla veri çekeceksek spresifik olarak listenin içinde liste formatını kullanacağız
print(student[['name','age']])
#bu şekilde aldığımız yapı yine bir series yapısı
print(type(student[['age','name']]))
#peki index0'dan index3 e kadar olan elamanları alacak olsam ne yapıcam ?
print(student[0:3])
print(student[-2])
#sondan 2.ci
#peki sırasını bilmiyorsam
print(student[0:])
#sondan 2 almak için ise
print(student[-2:])

print(student['name':'departmant'])
#nameden başla departmanta kadar yazdır diyorum  print(student[0:3]) bunun string hali ve numericaldan farkı son yazdığımız indexide dahil ediyor


 #loc -> location metodu,iloc location index location metodu
print(student.loc['departmant'])
#kesinlikle index kullandığımızı biliyoruz farkı bu
print(student.iloc[1])

student=pd.Series(['Halil','Kurnaz',23,'SE'],['name','surname','age','dp'])
print(student)
print()

#student da bulunanan nameyi değiştiriyoruz burada mesela
student['name']='Halil İbrahim'
print(student)
student.iloc[2]=24
print()
print(student)

#PANDAS SERİES -->MUTABLE
print()

student2=student.drop('name')
print(student)
print()
print(student2)
#drop orjinal veride işe yaramaz ama başka veriye eşleyip kullanırsak işe yarar.
#illaki veri elemanı silmek istiyorsak başka bir parametre kullancağız inplace
"""student.drop('name',inplace=True)
print(student)"""

print(len(student))
#uzunluğu
print(list(student))
#liste haline getirdik
print(dict(student))
#dict haline getirdik

"""print(sorted(student))
#bize sırala diyorum
#Veriyi baş harflerine göre sılarıyor"""
"""print(max(student))
#en uzun kelimeyi seçiyor"""