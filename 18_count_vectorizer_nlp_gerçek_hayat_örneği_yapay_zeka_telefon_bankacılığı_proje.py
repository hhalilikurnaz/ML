# -*- coding: utf-8 -*-
"""18 - Count Vectorizer/ NLP Gerçek Hayat Örneği Yapay Zeka Telefon Bankacılığı Proje.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/152uIvRKeQXo00zUQvPTIMix8Ua1SxZGZ
"""

import pandas as pd ; import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split



#NLP modellerin temelinde yazıyı anlamak vardır

df=pd.DataFrame()
df['cumleler']=["ali bak","ali ata bak","bak ali bak","ali güzel ata bak","ışık ılık süt iç","ışık süt iç"]

cv=CountVectorizer(max_features=5)

a=cv.fit_transform(df['cumleler'])

x=a.toarray()

cv.get_feature_names_out()

#stop words
# ne mesela fakat gibi bu kelimeler stop words kelimelerdir.
#Bilgisayar dilinde, etkisiz kelimeler, doğal data dilinin işlenmeden önce veya sonra filtrelenmiş kelimeleridir.

df=pd.read_csv('banka.csv')
df.head(5)

#derin öğrenme olsaydı numeric ifadeleride alırdım ama sklearn de çok fark etmiyor
df=df[['sorgu','label']]

df.head(3)

#sorgu sutununu preprocessing etmem lazım.
#Noktalamaları kaldır
#hepsini küçük harfe çevir
#stop words'leri kaldır.

stopwords=['fakat','lakin','ancak','acaba', 'ama', 'aslında', 'az', 'bazı', 'belki', 'biri', 'birkaç', 'birşey', 'biz', 'bu', 'çok', 'çünkü', 'da', 'daha', 'de', 'defa', 'diye', 'eğer', 'en', 'gibi', 'hem', 'hep', 'hepsi', 'her', 'hiç', 'için', 'ile', 'ise', 'kez', 'ki', 'kim', 'mı', 'mu', 'mü', 'nasıl', 'ne', 'neden', 'nerde', 'nerede', 'nereye', 'niçin', 'niye', 'o', 'sanki', 'şey', 'siz', 'şu', 'tüm', 've', 'veya', 'ya', 'yani']

#mesele ama bir stopword ama kelimelini içinde ama geçiyorsa onuda stop words alır bundan doalyı kelimelerin başına ve sonuna boşluk getirerek bunları tek olarak baktıracağım.Bunuda for döngüsüyle yapıyorum
for word in stopwords:
  word=" "+word+" "
  #burda kelimeyle oynuyorum
  df['sorgu']=df['sorgu'].str.replace(word," ")
df.head(3)

x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.7,random_state=33)

cv=CountVectorizer(max_features=50)

tahmin=x[-1].copy()
x=x[0:-1]
y=y[0:-1]

x=cv.fit_transform(df['sorgu']).toarray()
y=df['label']

#Overfitting oldu burada ezberledi

rf=RandomForestClassifier()
model=rf.fit(x,y)
model.score(x,y)

model=rf.fit(x_train,y_train)
skor=model.score(x_test,y_test)
sonuc=model.predict([tahmin])
print("Sonuc:",sonuc,"Skor",skor)

#LLM  long langiatede model -> chatgpy,bard, siri kullanıyo